SupportLocal - Technology Talk
Presented for gSchool
11:00 06 Dec 2013
Tags: supportlocal gschool go

Levi Cook
Cory LaNou

@levicook
@corylanou

* About this presentation

- Who is SupportLocal
- How did we arrive at our currently techology stack
- Overview of our current stack

* About SupportLocal

- We are trusted search.
- We were not always trusted search
- Ok, we weren't even always SupportLocal

We used to be JoinLocal

- JoinLocal was a white label product for yellow page directories
- YP's move too slow, so we pivoted

* Our first technology stack

- Microsoft .Net MVC
- Microsoft SQL Server
- Micrsoft Windows Web Server

Pros

- MVC.Net was better than Traditional .Net
- Utilized Entitiy Framework (their equivalent of ActiveRecord)
- Compiled Language

Cons

- Entity framework was buggy, and barely worked.
- Entity framework was a LONG ways from what ActiveRecord is
- MVC.net was still so new that it was pretty rough to work with

* So that didn't work... what next

- We stayed with MVC.net for about 6 months before calling it.
- It was time to move on, so...

* Enter Ruby on Rails

Pros

- Huge open source support
- High adoption
- Rapid development
- Levi had extensive experience in it

Cons

- Cory didn't know it
- Not a compiled language

* How did Ruby on Rails work out?

Quite well!

- We shortened out development cycles significantly over MVC.net
- And all the magic Rails brought with it

* So why switch to Go?

Mainly, tired of all the "magic" of Rails.

- bundle udpate / gem nightmares
- master debugging skills required too often

* What do we use go for?

Back-end Development

- "dynos"
- data loaders
- http servers
- one off scripting tasks (really)

* http servers

- static assets
- restful json api
- authenication and authorization
- etc.

* dynos

- background processing


* Front-end Development

- HTML, CSS and JavaSript
- Sadly, no go (yet)

We maintain a strong separation between front-end and back-end development.

- Each has significant, separate problems
- Let each world pick the best tools for the job at hand


* Front-end Development cont..

** Complicated and ugly :(

- Users expect rich, highly responsive user interfaces
- Requires a ton of JavaSript, which demands modularity and automation
- Modularity and automation requires tools, here's what we use...


* Tooling and Libraries

- Build and Packaging Tools - Compile and test all of the assets
- Automation Tools - too much to manage by hand
- Libraries - sane javascript: modular, observable


* Building and Packaging Tools

- Node - "command line JavaSript"
- Grunt - Rake (sort of)
- Browserify - Write browser code with node-style requires
- Bower - JavaSript packager manager, for browsers
- Recess - less linter and compiler
- Usemin+FileRev - cache busting


* Automation Tools
- livereload - reload my browser when stuff changes
- jslint - validate js files, as they change
- recess - validate less files, as they change
- tidy -  validate html files, as they change
- automatically run tests too
- PhantomJS - headless browser
- Mocha + Chai - like minitest / rspec / etc.


* JavaSript Frameworks

- Bootstrap (hate it, not modular, but it's useful)
- jQuery - DOM Manipulation
- CanJS - Observables (just do it)
- MapBox - Must have maps
- Braintree - PCI is hard, they solved it for us
- Facebook + Twitter SDKS
- Google Analytics
- uri.js - URL building library (beats concatenation)

* and now back go Go...

* Go compiles really fast

- current
  $ time go build

  real    0m1.268s
  user    0m1.074s
  sys     0m0.164s

- legacy
  $ time go build

  real    0m7.550s
  user    0m14.273s
  sys     0m5.164s

* Front End Resources

* Building and Packaging Tool Resources

.link http://nodejs.org/ node
.link http://gruntjs.com/ grunt
.link http://browserify.org/ browserify
.link http://bower.io/ bower
.link http://twitter.github.io/recess/ recess
.link https://github.com/yeoman/grunt-usemin usemin
.link https://github.com/yeoman/grunt-filerev filerev

* Automation Tools
.link http://livereload.com/ livereload
.link http://www.jslint.com/ jslint
.link http://tidy.sourceforge.net/ tidy
.link http://phantomjs.org/ phantomjs
.link http://visionmedia.github.io/mocha/ mocha
.link http://chaijs.com/ chai

* Javascript Frameworks

.link http://getbootstrap.com/ bootstrap
.link http://jquery.com/ jquery
.link http://canjs.com/ canjs
.link http://canjs.com/ mapbox
.link https://www.braintreepayments.com/ BrainTree
.link http://medialize.github.io/URI.js/ uri.js


* Other Resources

.link http://golang.org golang.org
.link http://denvergophers.com/2013-12/gschool.slide#1 denvergophers.com/talks/2013-12/gschool | (This Presentation and source)
.link https://code.google.com/p/go/source/browse/?repo=tools#hg%2Fpresent present (what this presentation was created with)
.link http://talks.golang.org/2012/simple.slide Presentation from Andrew Gerrand




