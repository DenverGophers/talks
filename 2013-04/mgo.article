Tutorial and examples with mgo 
Rich MongoDB driver for Go
19:15 25 Apr 2013
Tags: mongoDB mgo

Levi Cook
Cory LaNou

@levicook
@corylanou

* This talk will not teach you mongoDB

But there are great resources on it, and they have great documentation.

.link http://www.mongodb.org mongodb.org

This talk will include:

- An overview of mgo
- How to put it all together in a simple JSON api
- Quick overview on gorilla/mux http router

* Code Resources

.link https://github.com/DenverGophers/mgo-presentation github.com/DenverGophers/mgo-presentation | (This Presentation and source)
.link http://www.mongodb.org/ www.mongodb.org
.link http://labix.org/mgo labix.org/mgo
.link http://godoc.org/labix.org/v2/mgo/bson godoc.org/labix.org/v2/mgo/bson
.link http://godoc.org/labix.org/v2/mgo/bson#Marshal godoc.org/labix.org/v2/mgo/bson#Marshal | Supported tags
.link http://golang.org/ref/spec#Struct_types golang.org/ref/spec#Struct_types
.link http://golang.org/pkg/reflect/#StructField golang.org/pkg/reflect/#StructField
.link http://www.gorillatoolkit.org/pkg/mux www.gorillatoolkit.org/pkg/mux | router use for sample project
.link http://godoc.org/code.google.com/p/go.talks/pkg/present present (what this presentation was created with)

* What is mgo

mgo (pronounced as mango) is a MongoDB driver for the Go language that implements a rich and well tested selection of features under a very simple API following standard Go idioms.

* Example 1 - Connections

.play ./mgo/example_1/main.go /START OMIT/,/END OMIT/ 

* Example 2 - Structs and Annotations

.play ./mgo/example_2/main.go /START OMIT/,/END OMIT/ 

* Example 3 - Writing data via the upsert

.play ./mgo/example_3/main.go /START OMIT/,/END OMIT/ 

* Example 4 - Reading/Writing via find/apply

.play ./mgo/example_4/main.go /START OMIT/,/END OMIT/ 

* Example 5 - Retrieving data via the aggretation framework

.play ./mgo/example_5/main.go /START OMIT/,/END OMIT/ 

* Example 6 - Putting it all together

This example puts it all together with a simple web server that has json end points
with a rich html front end.

* The Model

.code ./mgo/example_6/models.go /START OMIT/,/END OMIT/ 

* Creating a type for you repo

.code ./mgo/example_6/repos.go /^type/,/^\)/ 

* Retrieving Todos via http handler

.code ./mgo/example_6/http_handlers.go  /^func handleTodos/,/^}/ 

* Retriving Todos via the repo - repo.All()

.code ./mgo/example_6/repos.go  /^func \(r todoRepo\) All/,/^}/ 

* Creating Todos via the http handler

.code ./mgo/example_6/http_handlers.go  /^func handleTodoCreate/,/^}/ 

* Creating Todos via the repo - repo.Create()

.code ./mgo/example_6/repos.go  /^func \(r todoRepo\) Create/,/^}/ 

* Updating Todos via the http handler

.code ./mgo/example_6/http_handlers.go  /^func handleTodoUpdate/,/^}/ 

* Updating Todos via the repo - repo.Update()

.code ./mgo/example_6/repos.go  /^func \(r todoRepo\) Update/,/^}/ 

* Destroying Todos via the http handler

.code ./mgo/example_6/http_handlers.go  /^func handleTodoDestroy/,/^}/ 

* Destroying Todos via the repo - repo.Destroy()

.code ./mgo/example_6/repos.go  /^func \(r todoRepo\) Destroy/,/^}/ 

* Completing Todos via the http handler

.code ./mgo/example_6/http_handlers.go  /^func handleTodoComplete/,/^}/ 

* Completing Todos via the repo - repo.Complete()

.code ./mgo/example_6/repos.go  /^func \(r todoRepo\) Complete/,/^}/ 

* Uncompleting Todos via the http handler

.code ./mgo/example_6/http_handlers.go  /^func handleTodoUncomplete/,/^}/ 

* Uncompleting Todos via the repo - repo.Uncomplete()

.code ./mgo/example_6/repos.go  /^func \(r todoRepo\) Uncomplete/,/^}/ 

* Read Json

.code ./mgo/example_6/read_json.go  /^func readJson/,/^}/ 

* Write Json

.code ./mgo/example_6/write_json.go  /^func writeJson/,/^}/ 

* Routing

.code ./mgo/example_6/main.go /START OMIT/,/END OMIT/ 
.code ./mgo/example_6/main.go /^func route/,/^}/ 
.code ./mgo/example_6/main.go /^func logRequest/,/^}/ 

* Running it

From the ./mgo/example_6 directory, run:

	go run *.go

* Denver Gophers

.link https://github.com/DenverGophers github.com/DenverGophers - All presentations and meetup materials
.link https://twitter.com/DenverGophers twitter.com/DenverGophers
.link https://plus.google.com/u/0/communities/104822260820066412402 Google Plus Denver Gophers Group

* Questions?
